import { decodeArray, encodeArray } from './array';

describe('decodeArray', () => {
  it('decodes an array', () => {
    const value = Buffer.from('0000000000000000000000000000000000000000000000000000000000000020', 'hex');
    const buffer = Buffer.from(
      '00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003',
      'hex'
    );
    expect(decodeArray(value, buffer, 'uint256[]')).toStrictEqual([1n, 2n, 3n]);
  });
});

describe('encodeArray', () => {
  it('encodes an array', () => {
    const target = Buffer.alloc(0);
    const address = '0x6b175474e89094c44da98b954eedeac495271d0f';

    expect(encodeArray(target, [address], 0, 'address[]').toString('hex')).toBe(
      '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f'
    );
    expect(encodeArray(target, [address, address], 0, 'address[]').toString('hex')).toBe(
      '000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f'
    );
  });
});
