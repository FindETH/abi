import { decode, encode } from './abi';

describe('encode', () => {
  it('encodes simple values', () => {
    expect(encode(['uint256', 'uint256'], [12345, 12345]).toString('hex')).toBe(
      '00000000000000000000000000000000000000000000000000000000000030390000000000000000000000000000000000000000000000000000000000003039'
    );
  });

  it('encodes array values', () => {
    expect(encode(['uint256', 'uint256[]', 'uint256'], [12345, [67890, 67890], 12345]).toString('hex')).toBe(
      '000000000000000000000000000000000000000000000000000000000000303900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000109320000000000000000000000000000000000000000000000000000000000010932'
    );
  });

  it('encodes nested values', () => {
    expect(
      encode(
        ['uint256', 'uint256[][]', 'uint256'],
        [
          12345,
          [
            [54321, 12345],
            [67890, 98760]
          ],
          12345
        ]
      ).toString('hex')
    ).toBe(
      '0000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000030390000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000d43100000000000000000000000000000000000000000000000000000000000030390000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000001093200000000000000000000000000000000000000000000000000000000000181c8'
    );
  });
});

describe('decode', () => {
  it('decodes a token transfer', () => {
    const buffer = Buffer.from(
      '0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000003039',
      'hex'
    );
    expect(decode(['address', 'uint256'], buffer)).toStrictEqual([
      '0x6b175474e89094c44da98b954eedeac495271d0f',
      12345n
    ]);
  });

  it('decodes array values', () => {
    const buffer = Buffer.from(
      '000000000000000000000000000000000000000000000000000000000000303900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000109320000000000000000000000000000000000000000000000000000000000010932',
      'hex'
    );
    expect(decode(['uint256', 'uint256[]', 'uint256'], buffer)).toStrictEqual([12345n, [67890n, 67890n], 12345n]);
  });
});
